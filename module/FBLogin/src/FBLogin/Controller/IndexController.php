<?php

namespace FBLogin\Controller;

use User\Model\User;
use Zend\Mvc\Controller\AbstractActionController;
use Zend\Mvc\Exception;
use Zend\Mvc\MvcEvent;
use Zend\Stdlib\Hydrator\Reflection;
use Zend\View\Model\ViewModel;


class IndexController extends AbstractActionController
{

    private $app_id = null;
    private $app_secret = null;

    public function onDispatch(MvcEvent $e)
    {
        $config = $this->getServiceLocator()->get('Config');
        if (isset($config['facebook'], $config['facebook']['app_id'], $config['facebook']['app_secret'])) {
            $facebook         = $config['facebook'];
            $this->app_id     = $facebook['app_id'];
            $this->app_secret = $facebook['app_secret'];
        }

        return parent::onDispatch($e); // TODO: Change the autogenerated stub
    }

    public function indexAction()
    {
        return new ViewModel();
    }

    public function loginAction()
    {
        $path = $this->url()->fromRoute('FBLogin/default', array('action' => 'callback', 'controller' => 'index'));
        define('CALLBACK', 'http://localhost:8081' . $path);

        $authURL = 'http://www.facebook.com/dialog/oauth?client_id=' . $this->app_id . '&redirect_uri=' . urlencode(CALLBACK) . '&scope=email';

//        header("Location: " . $authURL);

        return $this->redirect()->toUrl($authURL);
    }

    public function callbackAction()
    {
        $code = $_REQUEST['code'];

        $path = $this->url()->fromRoute('FBLogin/default', array('action' => 'callback', 'controller' => 'index'));
        define('CALLBACK', 'http://localhost:8081' . $path);
        $token_url = 'https://graph.facebook.com/oauth/access_token?client_id=' .
            $this->app_id . '&redirect_uri=' . urlencode(CALLBACK) . '&client_secret=' .
            $this->app_secret . '&code=' . $code;

        // access token 取得
        $access_token = file_get_contents($token_url);

        // ユーザ情報json取得してdecode
        $user_json = file_get_contents('https://graph.facebook.com/me?' . $access_token);
        $fb_user   = json_decode($user_json);

        // facebook の user_id + name(表示名)をセット

        /** @var \Zend\Authentication\AuthenticationService $authService */
        $authService = $this->getAuthService();
        $authService->setAdapter($this->getServiceLocator()->get('FBLogin\Authentication\Adapter\FacebookAdapter'));

        $loginFlg = $this->login($fb_user->id, $fb_user->email);
        if (!$loginFlg) {
            $userMapper = $this->getServiceLocator()->get('User\Mapper\User');
            $user       = $this->getServiceLocator()->get('User\Model\User');
            $user->setFirstName($fb_user->first_name);
            $user->setLastName($fb_user->last_name);
            $user->setName($fb_user->name);
            $user->setScId($fb_user->id);
            $user->setEmail($fb_user->email);
            $userMapper->insert($user);
            $loginFlg = $this->login($fb_user->id, $fb_user->email);
        }

        return $this->redirect()->toRoute('user/default');
    }

    /* ログアウト
    ----------------------------------------------------------------------------------*/
    public function logoutAction()
    {
        $storage = $this->getAuthService()->getStorage();
        // ストレージと認証情報を破棄する
        $storage->clear();


        return $this->redirect()->toRoute('FBLogin/default');
    }

    /* ログイン
    ----------------------------------------------------------------------------------*/
    public function login($key, $pass)
    {
        $this->getAuthService()->getAdapter()
            ->setIdentity($key)
            ->setCredential($pass);

        $result = $this->getAuthService()->authenticate();
        if ($result->isValid()) {
            $storage    = $this->getAuthService()->getStorage();
            $data       = (array)$this->getAuthService()->getAdapter()->getResultRowObject();
            $hydrator   = new Reflection();
            $userEntity = $hydrator->hydrate($data, new User());
            $storage->write($userEntity);

            return (true);
        } else {
            return (false);
        }
    }

    /**
     * @return \Zend\Authentication\AuthenticationService
     */
    private function getAuthService()
    {
        return $this->getServiceLocator()->get('Zend\Authentication\AuthenticationService');
    }


}

